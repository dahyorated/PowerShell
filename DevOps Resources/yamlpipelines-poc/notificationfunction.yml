variables:
# deine the variables use for the pipeline 
# do not store secrets in this 
  location: 'westeurope'
  environment: 'Development'
  ctpService: 'Co-Dev'
  owner: 'Dante.DeWitt@ey.com; john.vande.woude@ey.com'
  deploymentId: 'GTPWRK'
  chargeCode: '39721502'
  resourceGroup: 'GT-WEU-GTP-CORE-POC-RSG'
  clientid: '00efbc8e-98b3-499d-9cc1-8814e6abb0c2'
  var_omsWorkspaceName: 'GTPOMSWRKSP'
  omsMyWorkSpaceId: '33cfa4d8-86c2-455f-a584-abdc29973748'
  subscription: '3efbb09c-de65-4ed0-b6e3-4fc77081ccb3'
  ADTenantId: '5b973f99-77df-4beb-b27d-aa0c70b8482c'
  rolePurpose: 'Notification Service'
  functionAppStorageAccount: 'Function App'
  workspaceSecret: 'JaVVpoh8dzrfdi1j47oD2lMELXCVT9F0hZx6wcj/JaQmZWCt06dIt0AGxwNJNShvJhPKssNYzj3hHSfed9RSFw=='
  functionAppName: 'wkshpnotificationservice'

#
resources:
 pipelines:
   - pipeline: NotificationService
     source: Azure Functions - Notifications - CI
 
trigger: none
stages:
- stage: Deploy_Development
  variables: { 
    sampletxt: 'sample' 
  } 
  jobs:
  - job: Deploy
  # 
  #
  #
    pool:
      name: 'iLyaTestPool'
    steps:
    - script: |
       echo Deploying the code!
       echo Retrieve the artifacts
       echo Create Resource group
       echo create Application service
       echo create application service plan
       echo copy application Service 


      # Download an artifact named 'WebApp' from a specific build run to 'bin' in $(Build.SourcesDirectory)
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'specific'
        project: 'c739e34c-9543-4c2c-afaf-889e9c9ac7fb'
        pipeline: '138'
        specificBuildWithTriggering: true
        buildVersionToDownload: 'latest'
        downloadType: 'single'
        downloadPath: '$(System.ArtifactsDirectory)'
        artifactName: 'drop'

    - script: |
       echo  Artifacts directory
       tree $(System.ArtifactsDirectory) /F
    #    echo  $(System.ArtifactsDirectory)
    #    dir   $(System.ArtifactsDirectory) /s
    #    echo  Working directory
    #    dir   $(System.DefaultWorkingDirectory) /s

    - task: BB-deploy@0
      displayName: 'Deploy Resource Group'
      name: CreateRG
      inputs:
        ansibleTowerConn: 'GTP Ansible'
        ansibleTowerTemplate: 'prod-bb-create-resource-group-V1.1.6'
        additionalVars: |
          {
                      "var_location": "$(location)",
                      "var_environment": "$(environment)",
                      "var_ctpService": "$(ctpService)",
                      "var_owner": "$(owner)",
                      "var_deploymentId": "$(deploymentId)",
                      "var_chargeCode": "$(chargeCode)",
                      "var_resourceGroupName": "$(resourceGroup)",
                      "var_productApp": "GTP"
                    }


    - task: BB-deploy@0
      displayName: 'Deploy Function App'
      name: CreateFuncApp
      inputs:
        ansibleTowerConn: 'GTP Ansible'
        ansibleTowerTemplate: 'GTP | Action | Create Function App'
        additionalVars: |
          {
                      "var_deploy_to": "CORE",
                      "var_functionappsku": "S2",
                      "var_workerSize": "0",
                      "var_function_apps": ["$(rolePurpose)"],
                      "var_location": "$(location)",
                      "var_environment": "$(environment)",
                      "var_ctpService": "$(ctpService)",
                      "var_owner": "$(owner)",
                      "var_deploymentId": "$(deploymentId)",
                      "var_chargeCode": "$(chargeCode)",
                      "var_resourceGroupName": "$(resourceGroup)",
                      "var_productApp": "GTP",
                      "AZURE_RM_SUB": "$(subscription)",
                      "var_azureRmSubId": "$(subscription)",
                      "var_azure_rm_subid": "$(subscription)",
                      "AZURE_RM_TENANTID": "$(ADTenantId)",
                      "var_omsResourceGroup": "$(resourceGroup)",
                      "var_omsSubscriptionId": "$(subscription)",
                      "var_omsWorkspaceName": "$(var_omsWorkspaceName)",
                      "omsMyWorkSpaceId": "$(omsMyWorkSpaceId)",
                      "var_omsMyWorkspaceKey": "$(workspaceSecret)",
                      "var_functionAppName": ["$(functionAppName)"],
                      "var_rolePurposeSA": "$(functionAppStorageAccount)"
                    }

    - script: |
       echo  Deployed Function App is: $(CreateFuncApp.RESOURCE_NAME)
      name: DispFuncName
      displayName: 'Display Function App Name'

    - task: AzureRmWebAppDeployment@4
      displayName: 'Azure App Service Deploy: $(functionAppName)'
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: 'CTP - POC'
        appType: 'functionApp'
        # WebAppName: 'wkshpnotificationservice'
        WebAppName: '$(CreateFuncApp.RESOURCE_NAME)'
        packageForLinux: '$(System.ArtifactsDirectory)/drop/WebApp.zip'
        enableCustomDeployment: true
        DeploymentType: 'webDeploy'
        TakeAppOfflineFlag: false
        RemoveAdditionalFilesFlag: true
        ExcludeFilesFromAppDataFlag: false
        RenameFilesFlag: false

- stage: Test
  jobs:
  - job: TestOnWindows
    steps:
    - script: echo Testing on Windows!
    - script: echo testing

  - job: TestOnLinux
    steps:
    - script: echo Testing on Linux!